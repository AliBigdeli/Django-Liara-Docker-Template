
# migration docs: https://docs.github.com/en/actions/migrating-to-github-actions/migrating-from-gitlab-cicd-to-github-actions
name: Django Project Test and Deploy

# define which repo to listen to for trigger
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# list of all jobs
jobs:

  # testing stage of the project
  Test:
    # declaring the name of this job
    name: Test

    # which operating system its going to use
    runs-on: ubuntu-latest

    # services dependency
    services:

      # database which django is going to interact with
      db:

        # database image and version/tag
        image: postgres:latest

        # environment for configuring the database
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres

        # mapping ports
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    # global environment for this job
    env: 
      PGDB_HOST: 127.0.0.1
    
    # steps which it will go through for test
    steps:
    
    # bringing the code and checking 
    - uses: actions/checkout@v3

    # setup python environment and version
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    # installing django dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # running all migrations
    - name: Run migrations
      working-directory: ./core
      run: python manage.py migrate

    # testing the project from the root directory of core
    - name: Run tests
      working-directory: ./core
      env:
        DJANGO_SETTINGS_MODULE: core.settings
      run: pytest .

  Deploy:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    name: Deploy

    # depends on Test job
    needs: Test

    # choosing which os to run on
    runs-on: ubuntu-latest

    steps:

    # checking out the code
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: "18"
    - name: update-liara
      env:
        LIARA_TOKEN: ${{ secrets.LIARA_API_TOKEN }}
        LIARA_APP_NAME: ${{ secrets.LIARA_APP_NAME }}
        LIARA_APP_PORT: ${{ secrets.LIARA_APP_PORT }}
      run: |
        npm i -g @liara/cli@3
        liara deploy --app="$LIARA_APP_NAME" --api-token="$LIARA_TOKEN" --detach --port="$LIARA_APP_PORT"
